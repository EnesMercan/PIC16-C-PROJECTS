

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun Dec 27 18:34:02 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.20
    17                           ; Generated 12/02/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0088                     	;# 
   150  0089                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170                           
   171                           	psect	idataCOMMON
   172  0093                     __pidataCOMMON:
   173                           
   174                           ;initializer for _step
   175  0093  3401               	retlw	1
   176  0094  3403               	retlw	3
   177  0095  3402               	retlw	2
   178  0096  3406               	retlw	6
   179  0097  3404               	retlw	4
   180  0098  340C               	retlw	12
   181  0099  3408               	retlw	8
   182  009A  3409               	retlw	9
   183  0006                     _PORTB	set	6
   184  0038                     _RC0	set	56
   185  0086                     _TRISB	set	134
   186  0087                     _TRISC	set	135
   187                           
   188                           	psect	cinit
   189  000F                     start_initialization:	
   190                           ; #config settings
   191                           
   192  000F                     __initialization:
   193                           
   194                           ; Initialize objects allocated to COMMON
   195  000F  120A  118A  2093  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   196  0014  00F0               	movwf	__pdataCOMMON& (0+127)
   197  0015  120A  118A  2094  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   198  001A  00F1               	movwf	(__pdataCOMMON+1)& (0+127)
   199  001B  120A  118A  2095  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   200  0020  00F2               	movwf	(__pdataCOMMON+2)& (0+127)
   201  0021  120A  118A  2096  120A  118A  	fcall	__pidataCOMMON+3	;fetch initializer
   202  0026  00F3               	movwf	(__pdataCOMMON+3)& (0+127)
   203  0027  120A  118A  2097  120A  118A  	fcall	__pidataCOMMON+4	;fetch initializer
   204  002C  00F4               	movwf	(__pdataCOMMON+4)& (0+127)
   205  002D  120A  118A  2098  120A  118A  	fcall	__pidataCOMMON+5	;fetch initializer
   206  0032  00F5               	movwf	(__pdataCOMMON+5)& (0+127)
   207  0033  120A  118A  2099  120A  118A  	fcall	__pidataCOMMON+6	;fetch initializer
   208  0038  00F6               	movwf	(__pdataCOMMON+6)& (0+127)
   209  0039  120A  118A  209A  120A  118A  	fcall	__pidataCOMMON+7	;fetch initializer
   210  003E  00F7               	movwf	(__pdataCOMMON+7)& (0+127)
   211                           
   212                           ; Clear objects allocated to COMMON
   213  003F  01FD               	clrf	__pbssCOMMON& (0+127)
   214  0040                     end_of_initialization:	
   215                           ;End of C runtime variable initialization code
   216                           
   217  0040                     __end_of__initialization:
   218  0040  0183               	clrf	3
   219  0041  120A  118A  2844   	ljmp	_main	;jump to C main() function
   220                           
   221                           	psect	bssCOMMON
   222  007D                     __pbssCOMMON:
   223  007D                     _i:
   224  007D                     	ds	1
   225                           
   226                           	psect	dataCOMMON
   227  0070                     __pdataCOMMON:
   228  0070                     _step:
   229  0070                     	ds	8
   230                           
   231                           	psect	inittext
   232  0080                     init_fetch0:	
   233                           ;	Called with low address in FSR and high address in W
   234                           
   235  0080  087E               	movf	btemp,w
   236  0081  008A               	movwf	10
   237  0082  087F               	movf	btemp+1,w
   238  0083  0082               	movwf	2
   239  0084                     init_ram0:	
   240                           ;Called with:
   241                           ;	high address of idata address in btemp 
   242                           ;	low address of idata address in btemp+1 
   243                           ;	low address of data in FSR
   244                           ;	high address + 1 of data in btemp-1
   245                           
   246  0084  120A  118A  2080  120A  118A  	fcall	init_fetch0
   247  0089  0080               	movwf	0
   248  008A  0A84               	incf	4,f
   249  008B  0804               	movf	4,w
   250  008C  067D               	xorwf	btemp+-1,w
   251  008D  1903               	btfsc	3,2
   252  008E  3400               	retlw	0
   253  008F  0AFF               	incf	btemp+1,f
   254  0090  1903               	btfsc	3,2
   255  0091  0AFE               	incf	btemp,f
   256  0092  2884               	goto	init_ram0
   257                           
   258                           	psect	cstackCOMMON
   259  0078                     __pcstackCOMMON:
   260  0078                     ?_main:
   261  0078                     ?_myIntHandler:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0078                     ??_myIntHandler:	
   265                           ; 1 bytes @ 0x0
   266                           
   267                           
   268                           ; 1 bytes @ 0x0
   269  0078                     	ds	2
   270  007A                     ??_main:
   271                           
   272                           ; 1 bytes @ 0x2
   273  007A                     	ds	3
   274                           
   275                           	psect	maintext
   276  0044                     __pmaintext:	
   277 ;;
   278 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   279 ;;
   280 ;; *************** function _main *****************
   281 ;; Defined at:
   282 ;;		line 21 in file "main.c"
   283 ;; Parameters:    Size  Location     Type
   284 ;;		None
   285 ;; Auto vars:     Size  Location     Type
   286 ;;		None
   287 ;; Return value:  Size  Location     Type
   288 ;;                  1    wreg      void 
   289 ;; Registers used:
   290 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   291 ;; Tracked objects:
   292 ;;		On entry : B00/0
   293 ;;		On exit  : 0/0
   294 ;;		Unchanged: 0/0
   295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   296 ;;      Params:         0       0       0       0       0
   297 ;;      Locals:         0       0       0       0       0
   298 ;;      Temps:          3       0       0       0       0
   299 ;;      Totals:         3       0       0       0       0
   300 ;;Total ram usage:        3 bytes
   301 ;; Hardware stack levels required when called:    1
   302 ;; This function calls:
   303 ;;		Nothing
   304 ;; This function is called by:
   305 ;;		Startup code after reset
   306 ;; This function uses a non-reentrant model
   307 ;;
   308                           
   309                           
   310                           ;psect for function _main
   311  0044                     _main:
   312  0044                     l623:	
   313                           ;incstack = 0
   314                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0]
   315                           
   316                           
   317                           ;main.c: 23:     TRISC = 1;
   318  0044  3001               	movlw	1
   319  0045  1683               	bsf	3,5	;RP0=1, select bank1
   320  0046  1303               	bcf	3,6	;RP1=0, select bank1
   321  0047  0087               	movwf	7	;volatile
   322  0048                     l625:
   323                           
   324                           ;main.c: 24:     TRISB = 0;
   325  0048  0186               	clrf	6	;volatile
   326  0049                     l627:
   327                           
   328                           ;main.c: 28:     {;main.c: 29:         PORTB = step[i];
   329  0049  087D               	movf	_i,w
   330  004A  3E70               	addlw	(low (_step| 0))& (0+255)
   331  004B  0084               	movwf	4
   332  004C  0800               	movf	0,w
   333  004D  1283               	bcf	3,5	;RP0=0, select bank0
   334  004E  0086               	movwf	6	;volatile
   335  004F                     l629:
   336                           
   337                           ;main.c: 30:         _delay((unsigned long)((1500)*(4000000/4000.0)));
   338  004F  3008               	movlw	8
   339  0050  00FC               	movwf	??_main+2
   340  0051  309D               	movlw	157
   341  0052  00FB               	movwf	??_main+1
   342  0053  3005               	movlw	5
   343  0054  00FA               	movwf	??_main
   344  0055                     u47:
   345  0055  0BFA               	decfsz	??_main,f
   346  0056  2855               	goto	u47
   347  0057  0BFB               	decfsz	??_main+1,f
   348  0058  2855               	goto	u47
   349  0059  0BFC               	decfsz	??_main+2,f
   350  005A  2855               	goto	u47
   351  005B  285C               	nop2
   352  005C                     l631:
   353                           
   354                           ;main.c: 32:         if ( RC0 == 0)
   355  005C  1283               	bcf	3,5	;RP0=0, select bank0
   356  005D  1303               	bcf	3,6	;RP1=0, select bank0
   357  005E  1807               	btfsc	7,0	;volatile
   358  005F  2861               	goto	u11
   359  0060  2862               	goto	u10
   360  0061                     u11:
   361  0061  286F               	goto	l639
   362  0062                     u10:
   363  0062                     l633:
   364                           
   365                           ;main.c: 33:         {;main.c: 34:             if ( i == 7)
   366  0062  3007               	movlw	7
   367  0063  067D               	xorwf	_i,w
   368  0064  1D03               	btfss	3,2
   369  0065  2867               	goto	u21
   370  0066  2868               	goto	u20
   371  0067                     u21:
   372  0067  286A               	goto	l637
   373  0068                     u20:
   374  0068                     l635:
   375                           
   376                           ;main.c: 35:                 i = -1;
   377  0068  01FD               	clrf	_i
   378  0069  03FD               	decf	_i,f
   379  006A                     l637:
   380                           
   381                           ;main.c: 37:             i++;
   382  006A  3001               	movlw	1
   383  006B  00FA               	movwf	??_main
   384  006C  087A               	movf	??_main,w
   385  006D  07FD               	addwf	_i,f
   386                           
   387                           ;main.c: 38:         }
   388  006E  2849               	goto	l627
   389  006F                     l639:
   390                           
   391                           ;main.c: 40:         {;main.c: 41:             if ( i == 0)
   392  006F  087D               	movf	_i,w
   393  0070  1D03               	btfss	3,2
   394  0071  2873               	goto	u31
   395  0072  2874               	goto	u30
   396  0073                     u31:
   397  0073  2878               	goto	l643
   398  0074                     u30:
   399  0074                     l641:
   400                           
   401                           ;main.c: 42:                 i = 8;
   402  0074  3008               	movlw	8
   403  0075  00FA               	movwf	??_main
   404  0076  087A               	movf	??_main,w
   405  0077  00FD               	movwf	_i
   406  0078                     l643:
   407                           
   408                           ;main.c: 44:             i--;
   409  0078  30FF               	movlw	255
   410  0079  00FA               	movwf	??_main
   411  007A  087A               	movf	??_main,w
   412  007B  07FD               	addwf	_i,f
   413  007C  2849               	goto	l627
   414  007D  120A  118A  280C   	ljmp	start
   415  0080                     __end_of_main:
   416                           
   417                           	psect	text1
   418  009B                     __ptext1:	
   419 ;; *************** function _myIntHandler *****************
   420 ;; Defined at:
   421 ;;		line 52 in file "main.c"
   422 ;; Parameters:    Size  Location     Type
   423 ;;		None
   424 ;; Auto vars:     Size  Location     Type
   425 ;;		None
   426 ;; Return value:  Size  Location     Type
   427 ;;                  1    wreg      void 
   428 ;; Registers used:
   429 ;;		None
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   435 ;;      Params:         0       0       0       0       0
   436 ;;      Locals:         0       0       0       0       0
   437 ;;      Temps:          2       0       0       0       0
   438 ;;      Totals:         2       0       0       0       0
   439 ;;Total ram usage:        2 bytes
   440 ;; Hardware stack levels used:    1
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		Interrupt level 1
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           
   449                           ;psect for function _myIntHandler
   450  009B                     _myIntHandler:
   451  009B                     i1l31:
   452  009B  0879               	movf	??_myIntHandler+1,w
   453  009C  008A               	movwf	10
   454  009D  0E78               	swapf	??_myIntHandler^(0+4294967168),w
   455  009E  0083               	movwf	3
   456  009F  0EFE               	swapf	btemp,f
   457  00A0  0E7E               	swapf	btemp,w
   458  00A1  0009               	retfie
   459  00A2                     __end_of_myIntHandler:
   460  007E                     btemp	set	126	;btemp
   461  007E                     wtemp0	set	126
   462                           
   463                           	psect	intentry
   464  0004                     __pintentry:	
   465                           ;incstack = 0
   466                           ; Regs used in _myIntHandler: []
   467                           
   468  0004                     interrupt_function:
   469  007E                     saved_w	set	btemp
   470  0004  00FE               	movwf	btemp
   471  0005  0E03               	swapf	3,w
   472  0006  00F8               	movwf	??_myIntHandler
   473  0007  080A               	movf	10,w
   474  0008  00F9               	movwf	??_myIntHandler+1
   475  0009  120A  118A  289B   	ljmp	_myIntHandler
   476                           
   477                           	psect	config
   478                           
   479                           ;Config register CONFIG @ 0x2007
   480                           ;	Oscillator Selection bits
   481                           ;	FOSC = XT, XT oscillator
   482                           ;	Watchdog Timer Enable bit
   483                           ;	WDTE = OFF, WDT disabled
   484                           ;	Power-up Timer Enable bit
   485                           ;	PWRTE = OFF, PWRT disabled
   486                           ;	Brown-out Reset Enable bit
   487                           ;	BOREN = ON, BOR enabled
   488                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   489                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   490                           ;	Data EEPROM Memory Code Protection bit
   491                           ;	CPD = OFF, Data EEPROM code protection off
   492                           ;	Flash Program Memory Write Enable bits
   493                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   494                           ;	In-Circuit Debugger Mode bit
   495                           ;	DEBUG = 0x1, unprogrammed default
   496                           ;	Flash Program Memory Code Protection bit
   497                           ;	CP = OFF, Code protection off
   498  2007                     	org	8199
   499  2007  3F79               	dw	16249

Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      14
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIntHandler in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myIntHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIntHandler in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myIntHandler in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIntHandler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _myIntHandler                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _myIntHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       E      12        0.0%
ABS                  0      0       E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun Dec 27 18:34:02 2020

                      _i 007D                        pc 0002                       u10 0062  
                     u11 0061                       u20 0068                       u21 0067  
                     u30 0074                       u31 0073                       u47 0055  
                     fsr 0004                      l631 005C                      l623 0044  
                    l641 0074                      l633 0062                      l625 0048  
                    l643 0078                      l635 0068                      l627 0049  
                    l637 006A                      l629 004F                      l639 006F  
                    _RC0 0038                      fsr0 0004                      indf 0000  
                   i1l31 009B                     _main 0044                     _step 0070  
                   btemp 007E                     start 000C                    ?_main 0078  
                  _PORTB 0006                    _TRISB 0086                    _TRISC 0087  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000F             __end_of_main 0080                   ??_main 007A  
          ?_myIntHandler 0078             __pdataCOMMON 0070                   saved_w 007E  
__end_of__initialization 0040           __pcstackCOMMON 0078           ??_myIntHandler 0078  
             __pmaintext 0044               __pintentry 0004                  __ptext1 009B  
   end_of_initialization 0040     __end_of_myIntHandler 00A2            __pidataCOMMON 0093  
    start_initialization 000F               init_fetch0 0080              __pbssCOMMON 007D  
              ___latbits 0002    __size_of_myIntHandler 0007             _myIntHandler 009B  
      interrupt_function 0004            __size_of_main 003C                 init_ram0 0084  
               intlevel1 0000  
