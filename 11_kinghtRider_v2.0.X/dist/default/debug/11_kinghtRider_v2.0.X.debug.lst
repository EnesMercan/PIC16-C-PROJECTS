

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Nov 16 06:46:56 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
     9                           	dabs	1,0x7E,2
    10  0000                     
    11                           ; Version 2.20
    12                           ; Generated 12/02/2020 GMT
    13                           ; 
    14                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    15                           ; All rights reserved.
    16                           ; 
    17                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    18                           ; 
    19                           ; Redistribution and use in source and binary forms, with or without modification, are
    20                           ; permitted provided that the following conditions are met:
    21                           ; 
    22                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    23                           ;        conditions and the following disclaimer.
    24                           ; 
    25                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    26                           ;        of conditions and the following disclaimer in the documentation and/or other
    27                           ;        materials provided with the distribution.
    28                           ; 
    29                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    30                           ;        software without specific prior written permission.
    31                           ; 
    32                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    33                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    34                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    35                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    36                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    37                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    38                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    39                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    40                           ; 
    41                           ; 
    42                           ; Code-generator required, PIC16F628A Definitions
    43                           ; 
    44                           ; SFR Addresses
    45  0000                     	;# 
    46  0001                     	;# 
    47  0002                     	;# 
    48  0003                     	;# 
    49  0004                     	;# 
    50  0005                     	;# 
    51  0006                     	;# 
    52  000A                     	;# 
    53  000B                     	;# 
    54  000C                     	;# 
    55  000E                     	;# 
    56  000E                     	;# 
    57  000F                     	;# 
    58  0010                     	;# 
    59  0011                     	;# 
    60  0012                     	;# 
    61  0015                     	;# 
    62  0015                     	;# 
    63  0016                     	;# 
    64  0017                     	;# 
    65  0018                     	;# 
    66  0019                     	;# 
    67  001A                     	;# 
    68  001F                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  0086                     	;# 
    72  008C                     	;# 
    73  008E                     	;# 
    74  0092                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009B                     	;# 
    79  009C                     	;# 
    80  009D                     	;# 
    81  009F                     	;# 
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001F                     	;# 
   106  0081                     	;# 
   107  0085                     	;# 
   108  0086                     	;# 
   109  008C                     	;# 
   110  008E                     	;# 
   111  0092                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009F                     	;# 
   119                           
   120                           	psect	strings
   121  0001                     __pstrings:
   122  0001                     stringtab:
   123  0001                     __stringtab:
   124  0001                     stringcode:	
   125                           ;	String table - string pointers are 1 byte each
   126                           
   127  0001                     stringdir:
   128  0001  3000               	movlw	high stringdir
   129  0002  008A               	movwf	10
   130  0003  0804               	movf	4,w
   131  0004  0A84               	incf	4,f
   132  0005  0782               	addwf	2,f
   133  0006                     __stringbase:
   134  0006  3400               	retlw	0
   135  0007                     __end_of__stringtab:
   136  0007                     _led:
   137  0007  3401               	retlw	1
   138  0008  3402               	retlw	2
   139  0009  3404               	retlw	4
   140  000A  3408               	retlw	8
   141  000B  3410               	retlw	16
   142  000C  3420               	retlw	32
   143  000D  3440               	retlw	64
   144  000E  3480               	retlw	128
   145  000F                     __end_of_led:
   146  000F                     _OFF_TIME:
   147  000F  340A               	retlw	10
   148  0010                     __end_of_OFF_TIME:
   149  0010                     _ON_TIME:
   150  0010  3423               	retlw	35
   151  0011                     __end_of_ON_TIME:
   152  0006                     _PORTB	set	6
   153  0028                     _RA0	set	40
   154  0086                     _TRISB	set	134
   155                           
   156                           	psect	cinit
   157  07FE                     start_initialization:	
   158                           ; #config settings
   159                           
   160  07FE                     __initialization:
   161  07FE                     end_of_initialization:	
   162                           ;End of C runtime variable initialization code
   163                           
   164  07FE                     __end_of__initialization:
   165  07FE  0183               	clrf	3
   166  07FF  2F80               	ljmp	_main	;jump to C main() function
   167                           
   168                           	psect	cstackCOMMON
   169  0070                     __pcstackCOMMON:
   170  0070                     ?_main:
   171  0070                     ??_main:	
   172                           ; 1 bytes @ 0x0
   173                           
   174                           
   175                           ; 1 bytes @ 0x0
   176  0070                     	ds	3
   177  0073                     main@j:
   178                           
   179                           ; 1 bytes @ 0x3
   180  0073                     	ds	2
   181  0075                     main@i:
   182                           
   183                           ; 1 bytes @ 0x5
   184  0075                     	ds	1
   185                           
   186                           	psect	maintext
   187  0780                     __pmaintext:	
   188 ;;
   189 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   190 ;;
   191 ;; *************** function _main *****************
   192 ;; Defined at:
   193 ;;		line 25 in file "main.c"
   194 ;; Parameters:    Size  Location     Type
   195 ;;		None
   196 ;; Auto vars:     Size  Location     Type
   197 ;;  j               1    0        char 
   198 ;;  j               1    3[COMMON] char 
   199 ;;  i               1    5[COMMON] char 
   200 ;; Return value:  Size  Location     Type
   201 ;;                  1    wreg      void 
   202 ;; Registers used:
   203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   204 ;; Tracked objects:
   205 ;;		On entry : B00/0
   206 ;;		On exit  : 0/0
   207 ;;		Unchanged: 0/0
   208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   209 ;;      Params:         0       0       0       0
   210 ;;      Locals:         3       0       0       0
   211 ;;      Temps:          3       0       0       0
   212 ;;      Totals:         6       0       0       0
   213 ;;Total ram usage:        6 bytes
   214 ;; Hardware stack levels used:    1
   215 ;; This function calls:
   216 ;;		Nothing
   217 ;; This function is called by:
   218 ;;		Startup code after reset
   219 ;; This function uses a non-reentrant model
   220 ;;
   221                           
   222                           
   223                           ;psect for function _main
   224  0780                     _main:
   225  0780                     l681:	
   226                           ;incstack = 0
   227                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath]
   228                           
   229                           
   230                           ;main.c: 27:     PORTB = 0;
   231  0780  1283               	bcf	3,5	;RP0=0, select bank0
   232  0781  1303               	bcf	3,6	;RP1=0, select bank0
   233  0782  0186               	clrf	6	;volatile
   234                           
   235                           ;main.c: 28:     TRISB = 0;
   236  0783  1683               	bsf	3,5	;RP0=1, select bank1
   237  0784  1303               	bcf	3,6	;RP1=0, select bank1
   238  0785  0186               	clrf	6	;volatile
   239  0786                     l683:
   240                           
   241                           ;main.c: 33:     {;main.c: 35:         if ( RA0 == 0 )
   242  0786  1283               	bcf	3,5	;RP0=0, select bank0
   243  0787  1303               	bcf	3,6	;RP1=0, select bank0
   244  0788  1805               	btfsc	5,0	;volatile
   245  0789  2F8B               	goto	u51
   246  078A  2F8C               	goto	u50
   247  078B                     u51:
   248  078B  2F86               	goto	l683
   249  078C                     u50:
   250  078C                     l685:
   251                           
   252                           ;main.c: 36:         {;main.c: 37:             i = 0;
   253  078C  01F5               	clrf	main@i
   254                           
   255                           ;main.c: 38:             while (i<=6)
   256  078D  2FC5               	goto	l709
   257  078E                     l687:
   258                           
   259                           ;main.c: 39:             {;main.c: 40:                 for (int8_t j = 0; i<8; j++)
   260  078E  01F3               	clrf	main@j
   261  078F                     l689:
   262  078F  0875               	movf	main@i,w
   263  0790  3A80               	xorlw	128
   264  0791  3E78               	addlw	-136
   265  0792  1C03               	skipc
   266  0793  2F95               	goto	u61
   267  0794  2F96               	goto	u60
   268  0795                     u61:
   269  0795  2F97               	goto	l693
   270  0796                     u60:
   271  0796  2FB8               	goto	l705
   272  0797                     l693:
   273                           
   274                           ;main.c: 41:                 {;main.c: 42:                     PORTB = led[j];
   275  0797  0873               	movf	main@j,w
   276  0798  3E01               	addlw	low ((_led-__stringbase)| (0+32768))
   277  0799  0084               	movwf	4
   278  079A  2001               	fcall	stringdir
   279  079B  1283               	bcf	3,5	;RP0=0, select bank0
   280  079C  1303               	bcf	3,6	;RP1=0, select bank0
   281  079D  0086               	movwf	6	;volatile
   282  079E                     l695:
   283                           
   284                           ;main.c: 43:                     _delay((unsigned long)((ON_TIME)*(10000000/4000.0)));
   285  079E  3072               	movlw	114
   286  079F  00F1               	movwf	??_main+1
   287  07A0  30A1               	movlw	161
   288  07A1  00F0               	movwf	??_main
   289  07A2                     u97:
   290  07A2  0BF0               	decfsz	??_main,f
   291  07A3  2FA2               	goto	u97
   292  07A4  0BF1               	decfsz	??_main+1,f
   293  07A5  2FA2               	goto	u97
   294  07A6  2FA7               	nop2
   295  07A7                     l697:
   296                           
   297                           ;main.c: 45:                     PORTB = 0;
   298  07A7  1283               	bcf	3,5	;RP0=0, select bank0
   299  07A8  1303               	bcf	3,6	;RP1=0, select bank0
   300  07A9  0186               	clrf	6	;volatile
   301  07AA                     l699:
   302                           
   303                           ;main.c: 46:                     _delay((unsigned long)((OFF_TIME)*(10000000/4000.0)));
   304  07AA  3021               	movlw	33
   305  07AB  00F1               	movwf	??_main+1
   306  07AC  3076               	movlw	118
   307  07AD  00F0               	movwf	??_main
   308  07AE                     u107:
   309  07AE  0BF0               	decfsz	??_main,f
   310  07AF  2FAE               	goto	u107
   311  07B0  0BF1               	decfsz	??_main+1,f
   312  07B1  2FAE               	goto	u107
   313  07B2  0000               	nop
   314  07B3                     l701:
   315                           
   316                           ;main.c: 47:                 }
   317  07B3  3001               	movlw	1
   318  07B4  00F0               	movwf	??_main
   319  07B5  0870               	movf	??_main,w
   320  07B6  07F3               	addwf	main@j,f
   321  07B7  2F8F               	goto	l689
   322  07B8                     l705:
   323                           
   324                           ;main.c: 49:                 i++;
   325  07B8  3001               	movlw	1
   326  07B9  00F0               	movwf	??_main
   327  07BA  0870               	movf	??_main,w
   328  07BB  07F5               	addwf	main@i,f
   329  07BC                     l707:
   330                           
   331                           ;main.c: 50:                 _delay((unsigned long)((10)*(10000000/4000.0)));
   332  07BC  3021               	movlw	33
   333  07BD  00F1               	movwf	??_main+1
   334  07BE  3076               	movlw	118
   335  07BF  00F0               	movwf	??_main
   336  07C0                     u117:
   337  07C0  0BF0               	decfsz	??_main,f
   338  07C1  2FC0               	goto	u117
   339  07C2  0BF1               	decfsz	??_main+1,f
   340  07C3  2FC0               	goto	u117
   341  07C4  0000               	nop
   342  07C5                     l709:
   343                           
   344                           ;main.c: 38:             while (i<=6)
   345  07C5  0875               	movf	main@i,w
   346  07C6  3A80               	xorlw	128
   347  07C7  3E79               	addlw	-135
   348  07C8  1C03               	skipc
   349  07C9  2FCB               	goto	u71
   350  07CA  2FCC               	goto	u70
   351  07CB                     u71:
   352  07CB  2F8E               	goto	l687
   353  07CC                     u70:
   354  07CC                     l711:
   355                           
   356                           ;main.c: 54:             _delay((unsigned long)((100)*(10000000/4000.0)));
   357  07CC  3002               	movlw	2
   358  07CD  00F2               	movwf	??_main+2
   359  07CE  3045               	movlw	69
   360  07CF  00F1               	movwf	??_main+1
   361  07D0  30A9               	movlw	169
   362  07D1  00F0               	movwf	??_main
   363  07D2                     u127:
   364  07D2  0BF0               	decfsz	??_main,f
   365  07D3  2FD2               	goto	u127
   366  07D4  0BF1               	decfsz	??_main+1,f
   367  07D5  2FD2               	goto	u127
   368  07D6  0BF2               	decfsz	??_main+2,f
   369  07D7  2FD2               	goto	u127
   370  07D8  2FD9               	nop2
   371  07D9                     l713:
   372                           
   373                           ;main.c: 57:             i = 0;
   374  07D9  01F5               	clrf	main@i
   375                           
   376                           ;main.c: 58:             while (i<=6)
   377  07DA  2FE8               	goto	l733
   378  07DB                     l715:
   379  07DB                     l729:
   380                           
   381                           ;main.c: 69:                 i++;
   382  07DB  3001               	movlw	1
   383  07DC  00F0               	movwf	??_main
   384  07DD  0870               	movf	??_main,w
   385  07DE  07F5               	addwf	main@i,f
   386  07DF                     l731:
   387                           
   388                           ;main.c: 70:                 _delay((unsigned long)((10)*(10000000/4000.0)));
   389  07DF  3021               	movlw	33
   390  07E0  00F1               	movwf	??_main+1
   391  07E1  3076               	movlw	118
   392  07E2  00F0               	movwf	??_main
   393  07E3                     u137:
   394  07E3  0BF0               	decfsz	??_main,f
   395  07E4  2FE3               	goto	u137
   396  07E5  0BF1               	decfsz	??_main+1,f
   397  07E6  2FE3               	goto	u137
   398  07E7  0000               	nop
   399  07E8                     l733:
   400                           
   401                           ;main.c: 58:             while (i<=6)
   402  07E8  0875               	movf	main@i,w
   403  07E9  3A80               	xorlw	128
   404  07EA  3E79               	addlw	-135
   405  07EB  1C03               	skipc
   406  07EC  2FEE               	goto	u81
   407  07ED  2FEF               	goto	u80
   408  07EE                     u81:
   409  07EE  2FDB               	goto	l715
   410  07EF                     u80:
   411  07EF                     l735:
   412                           
   413                           ;main.c: 73:             _delay((unsigned long)((1000)*(10000000/4000.0)));
   414  07EF  300D               	movlw	13
   415  07F0  00F2               	movwf	??_main+2
   416  07F1  30AF               	movlw	175
   417  07F2  00F1               	movwf	??_main+1
   418  07F3  30B6               	movlw	182
   419  07F4  00F0               	movwf	??_main
   420  07F5                     u147:
   421  07F5  0BF0               	decfsz	??_main,f
   422  07F6  2FF5               	goto	u147
   423  07F7  0BF1               	decfsz	??_main+1,f
   424  07F8  2FF5               	goto	u147
   425  07F9  0BF2               	decfsz	??_main+2,f
   426  07FA  2FF5               	goto	u147
   427  07FB  0000               	nop
   428  07FC  2F86               	goto	l683
   429  07FD  2800               	ljmp	start
   430  07FE                     __end_of_main:
   431  007E                     btemp	set	126	;btemp
   432  007E                     wtemp0	set	126
   433                           
   434                           	psect	config
   435                           
   436                           ;Config register CONFIG @ 0x2007
   437                           ;	Oscillator Selection bits
   438                           ;	FOSC = EXTRCIO, RC oscillator: I/O function on RA6/OSC2/CLKOUT pin, Resistor and Capac
      +                          itor on RA7/OSC1/CLKIN
   439                           ;	Watchdog Timer Enable bit
   440                           ;	WDTE = OFF, WDT disabled
   441                           ;	Power-up Timer Enable bit
   442                           ;	PWRTE = OFF, PWRT disabled
   443                           ;	RA5/MCLR/VPP Pin Function Select bit
   444                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
   445                           ;	Brown-out Detect Enable bit
   446                           ;	BOREN = OFF, BOD disabled
   447                           ;	Low-Voltage Programming Enable bit
   448                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
   449                           ;	Data EE Memory Code Protection bit
   450                           ;	CPD = OFF, Data memory code protection off
   451                           ;	Flash Program Memory Code Protection bit
   452                           ;	CP = OFF, Code protection off
   453  2007                     	org	8199
   454  2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _main                                                 6     6      0     207
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Nov 16 06:46:56 2020

                      pc 0002                       u50 078C                       u51 078B  
                     u60 0796                       u61 0795                       u70 07CC  
                     u71 07CB                       u80 07EF                       u81 07EE  
                     u97 07A2                       fsr 0004                      l701 07B3  
                    l711 07CC                      l713 07D9                      l705 07B8  
                    l731 07DF                      l715 07DB                      l707 07BC  
                    l733 07E8                      l709 07C5                      l735 07EF  
                    l729 07DB                      l681 0780                      l683 0786  
                    l693 0797                      l685 078C                      l695 079E  
                    l687 078E                      l697 07A7                      l689 078F  
                    l699 07AA                      _RA0 0028                      u107 07AE  
                    u117 07C0                      u127 07D2                      u137 07E3  
                    u147 07F5                      _led 0007                      fsr0 0004  
        __end_of_ON_TIME 0011                     _main 0780                     btemp 007E  
                   start 0000                    ?_main 0070         __end_of_OFF_TIME 0010  
                  _PORTB 0006                    _TRISB 0086                    main@i 0075  
                  main@j 0073                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07FE             __end_of_main 07FE  
                 ??_main 0070  __end_of__initialization 07FE           __pcstackCOMMON 0070  
             __pmaintext 0780                  _ON_TIME 0010               __stringtab 0001  
   end_of_initialization 07FE      start_initialization 07FE              __end_of_led 000F  
              ___latbits 0000                __pstrings 0001                 _OFF_TIME 000F  
            __stringbase 0006       __end_of__stringtab 0007            __size_of_main 007E  
              stringcode 0001                 stringdir 0001                 stringtab 0001  
