

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed Dec 23 19:56:51 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x4E,2
    14  0000                     
    15                           ; Version 2.20
    16                           ; Generated 12/02/2020 GMT
    17                           ; 
    18                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F84A Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  0081                     	;# 
    61  0085                     	;# 
    62  0086                     	;# 
    63  0088                     	;# 
    64  0089                     	;# 
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  0081                     	;# 
    77  0085                     	;# 
    78  0086                     	;# 
    79  0088                     	;# 
    80  0089                     	;# 
    81  0001                     _TMR0	set	1
    82  000B                     _INTCONbits	set	11
    83  0006                     _PORTB	set	6
    84  005A                     _T0IF	set	90
    85  0081                     _OPTION_REG	set	129
    86  0081                     _OPTION_REGbits	set	129
    87  0086                     _TRISB	set	134
    88                           
    89                           	psect	cinit
    90  000C                     start_initialization:	
    91                           ; #config settings
    92                           
    93  000C                     __initialization:
    94                           
    95                           ; Clear objects allocated to BANK0
    96  000C  1283               	bcf	3,5	;RP0=0, select bank0
    97  000D  0190               	clrf	__pbssBANK0& (0+127)
    98  000E                     end_of_initialization:	
    99                           ;End of C runtime variable initialization code
   100                           
   101  000E                     __end_of__initialization:
   102  000E  0183               	clrf	3
   103  000F  283E               	ljmp	_main	;jump to C main() function
   104                           
   105                           	psect	bssBANK0
   106  0010                     __pbssBANK0:
   107  0010                     _counter:
   108  0010                     	ds	1
   109                           
   110                           	psect	cstackCOMMON
   111  0000                     __pcstackCOMMON:
   112  0000                     ??_main:
   113                           
   114                           	psect	cstackBANK0
   115  000C                     __pcstackBANK0:	
   116                           ; 1 bytes @ 0x0
   117                           
   118  000C                     ?_setupTimer:
   119  000C                     ?_main:	
   120                           ; 1 bytes @ 0x0
   121                           
   122  000C                     ?_myInterruptHnadler:	
   123                           ; 1 bytes @ 0x0
   124                           
   125  000C                     ??_myInterruptHnadler:	
   126                           ; 1 bytes @ 0x0
   127                           
   128                           
   129                           ; 1 bytes @ 0x0
   130  000C                     	ds	3
   131  000F                     ??_setupTimer:
   132                           
   133                           ; 1 bytes @ 0x3
   134  000F                     	ds	1
   135                           
   136                           	psect	maintext
   137  003E                     __pmaintext:	
   138 ;;
   139 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   140 ;;
   141 ;; *************** function _main *****************
   142 ;; Defined at:
   143 ;;		line 62 in file "main.c"
   144 ;; Parameters:    Size  Location     Type
   145 ;;		None
   146 ;; Auto vars:     Size  Location     Type
   147 ;;		None
   148 ;; Return value:  Size  Location     Type
   149 ;;                  1    wreg      void 
   150 ;; Registers used:
   151 ;;		wreg, status,2, status,0, pclath, cstack
   152 ;; Tracked objects:
   153 ;;		On entry : B00/0
   154 ;;		On exit  : 0/0
   155 ;;		Unchanged: 0/0
   156 ;; Data sizes:     COMMON   BANK0
   157 ;;      Params:         0       0
   158 ;;      Locals:         0       0
   159 ;;      Temps:          0       0
   160 ;;      Totals:         0       0
   161 ;;Total ram usage:        0 bytes
   162 ;; Hardware stack levels required when called:    2
   163 ;; This function calls:
   164 ;;		_setupTimer
   165 ;; This function is called by:
   166 ;;		Startup code after reset
   167 ;; This function uses a non-reentrant model
   168 ;;
   169                           
   170                           
   171                           ;psect for function _main
   172  003E                     _main:
   173  003E                     l660:	
   174                           ;incstack = 0
   175                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   176                           
   177                           
   178                           ;main.c: 64:     setupTimer();
   179  003E  202D               	fcall	_setupTimer
   180  003F                     l662:
   181                           
   182                           ;main.c: 65:     TRISB = 0;
   183  003F  1683               	bsf	3,5	;RP0=1, select bank1
   184  0040  0186               	clrf	6	;volatile
   185  0041                     l664:
   186                           
   187                           ;main.c: 66:     PORTB = 0;
   188  0041  1283               	bcf	3,5	;RP0=0, select bank0
   189  0042  0186               	clrf	6	;volatile
   190  0043                     l666:
   191                           
   192                           ;main.c: 67:     counter = 0;
   193  0043  0190               	clrf	_counter
   194  0044                     l23:	
   195                           ;main.c: 69:     while (1)
   196                           
   197  0044                     l24:	
   198                           ;main.c: 70:     {;main.c: 73:     }
   199                           
   200  0044  2844               	goto	l23
   201  0045  280B               	ljmp	start
   202  0046                     __end_of_main:
   203                           
   204                           	psect	text1
   205  002D                     __ptext1:	
   206 ;; *************** function _setupTimer *****************
   207 ;; Defined at:
   208 ;;		line 97 in file "main.c"
   209 ;; Parameters:    Size  Location     Type
   210 ;;		None
   211 ;; Auto vars:     Size  Location     Type
   212 ;;		None
   213 ;; Return value:  Size  Location     Type
   214 ;;                  1    wreg      void 
   215 ;; Registers used:
   216 ;;		wreg, status,2, status,0
   217 ;; Tracked objects:
   218 ;;		On entry : 0/0
   219 ;;		On exit  : 0/0
   220 ;;		Unchanged: 0/0
   221 ;; Data sizes:     COMMON   BANK0
   222 ;;      Params:         0       0
   223 ;;      Locals:         0       0
   224 ;;      Temps:          0       1
   225 ;;      Totals:         0       1
   226 ;;Total ram usage:        1 bytes
   227 ;; Hardware stack levels used:    1
   228 ;; Hardware stack levels required when called:    1
   229 ;; This function calls:
   230 ;;		Nothing
   231 ;; This function is called by:
   232 ;;		_main
   233 ;; This function uses a non-reentrant model
   234 ;;
   235                           
   236                           
   237                           ;psect for function _setupTimer
   238  002D                     _setupTimer:
   239  002D                     l654:	
   240                           ;incstack = 0
   241                           ; Regs used in _setupTimer: [wreg+status,2+status,0]
   242                           
   243                           
   244                           ;main.c: 99:     INTCONbits.GIE = 1;
   245  002D  178B               	bsf	11,7	;volatile
   246                           
   247                           ;main.c: 100:     INTCONbits.T0IF = 0;
   248  002E  110B               	bcf	11,2	;volatile
   249                           
   250                           ;main.c: 101:     INTCONbits.T0IE = 1;
   251  002F  168B               	bsf	11,5	;volatile
   252                           
   253                           ;main.c: 103:     OPTION_REGbits.T0CS = 0;
   254  0030  1683               	bsf	3,5	;RP0=1, select bank1
   255  0031  1281               	bcf	1,5	;volatile
   256                           
   257                           ;main.c: 104:     OPTION_REGbits.PSA = 0;
   258  0032  1181               	bcf	1,3	;volatile
   259                           
   260                           ;main.c: 105:     OPTION_REGbits.T0SE = 0;
   261  0033  1201               	bcf	1,4	;volatile
   262  0034                     l656:
   263                           
   264                           ;main.c: 106:     OPTION_REG |= 0b00000111;
   265  0034  3007               	movlw	7
   266  0035  1283               	bcf	3,5	;RP0=0, select bank0
   267  0036  008F               	movwf	??_setupTimer
   268  0037  080F               	movf	??_setupTimer,w
   269  0038  1683               	bsf	3,5	;RP0=1, select bank1
   270  0039  0481               	iorwf	1,f	;volatile
   271  003A                     l658:
   272                           
   273                           ;main.c: 109:     TMR0 = 195;
   274  003A  30C3               	movlw	195
   275  003B  1283               	bcf	3,5	;RP0=0, select bank0
   276  003C  0081               	movwf	1	;volatile
   277  003D                     l36:
   278  003D  0008               	return
   279  003E                     __end_of_setupTimer:
   280                           
   281                           	psect	text2
   282  0010                     __ptext2:	
   283 ;; *************** function _myInterruptHnadler *****************
   284 ;; Defined at:
   285 ;;		line 79 in file "main.c"
   286 ;; Parameters:    Size  Location     Type
   287 ;;		None
   288 ;; Auto vars:     Size  Location     Type
   289 ;;		None
   290 ;; Return value:  Size  Location     Type
   291 ;;                  1    wreg      void 
   292 ;; Registers used:
   293 ;;		wreg, status,2, status,0
   294 ;; Tracked objects:
   295 ;;		On entry : 0/0
   296 ;;		On exit  : 0/0
   297 ;;		Unchanged: 0/0
   298 ;; Data sizes:     COMMON   BANK0
   299 ;;      Params:         0       0
   300 ;;      Locals:         0       0
   301 ;;      Temps:          0       3
   302 ;;      Totals:         0       3
   303 ;;Total ram usage:        3 bytes
   304 ;; Hardware stack levels used:    1
   305 ;; This function calls:
   306 ;;		Nothing
   307 ;; This function is called by:
   308 ;;		Interrupt level 1
   309 ;; This function uses a non-reentrant model
   310 ;;
   311                           
   312                           
   313                           ;psect for function _myInterruptHnadler
   314  0010                     _myInterruptHnadler:
   315  0010                     i1l668:
   316                           
   317                           ;main.c: 81:     if (INTCONbits.T0IF)
   318  0010  1D0B               	btfss	11,2	;volatile
   319  0011  2813               	goto	u3_21
   320  0012  2814               	goto	u3_20
   321  0013                     u3_21:
   322  0013  2826               	goto	i1l33
   323  0014                     u3_20:
   324  0014                     i1l670:
   325                           
   326                           ;main.c: 82:     {;main.c: 83:         counter++;
   327  0014  3001               	movlw	1
   328  0015  008C               	movwf	??_myInterruptHnadler
   329  0016  080C               	movf	??_myInterruptHnadler,w
   330  0017  0790               	addwf	_counter,f
   331                           
   332                           ;main.c: 85:         if (counter == 10)
   333  0018  300A               	movlw	10
   334  0019  0610               	xorwf	_counter,w
   335  001A  1D03               	btfss	3,2
   336  001B  281D               	goto	u4_21
   337  001C  281E               	goto	u4_20
   338  001D                     u4_21:
   339  001D  2823               	goto	i1l676
   340  001E                     u4_20:
   341  001E                     i1l672:
   342                           
   343                           ;main.c: 86:         {;main.c: 87:             counter = 0;
   344  001E  0190               	clrf	_counter
   345  001F                     i1l674:
   346                           
   347                           ;main.c: 88:             PORTB ^= 0x01;
   348  001F  3001               	movlw	1
   349  0020  008C               	movwf	??_myInterruptHnadler
   350  0021  080C               	movf	??_myInterruptHnadler,w
   351  0022  0686               	xorwf	6,f	;volatile
   352  0023                     i1l676:
   353                           
   354                           ;main.c: 91:         TMR0 = 60;
   355  0023  303C               	movlw	60
   356  0024  0081               	movwf	1	;volatile
   357  0025                     i1l678:
   358                           
   359                           ;main.c: 92:         T0IF = 0;
   360  0025  110B               	bcf	11,2	;volatile
   361  0026                     i1l33:
   362  0026  080E               	movf	??_myInterruptHnadler+2,w
   363  0027  008A               	movwf	10
   364  0028  0E0D               	swapf	(??_myInterruptHnadler+1)^0,w
   365  0029  0083               	movwf	3
   366  002A  0ECE               	swapf	btemp,f
   367  002B  0E4E               	swapf	btemp,w
   368  002C  0009               	retfie
   369  002D                     __end_of_myInterruptHnadler:
   370  004E                     btemp	set	78	;btemp
   371  004E                     wtemp0	set	78
   372                           
   373                           	psect	intentry
   374  0004                     __pintentry:	
   375                           ;incstack = 0
   376                           ; Regs used in _myInterruptHnadler: [wreg+status,2+status,0]
   377                           
   378  0004                     interrupt_function:
   379  004E                     saved_w	set	btemp
   380  0004  00CE               	movwf	btemp
   381  0005  0E03               	swapf	3,w
   382  0006  1283               	bcf	3,5	;RP0=0, select bank0
   383  0007  008D               	movwf	??_myInterruptHnadler+1
   384  0008  080A               	movf	10,w
   385  0009  008E               	movwf	??_myInterruptHnadler+2
   386  000A  2810               	ljmp	_myInterruptHnadler
   387                           
   388                           	psect	config
   389                           
   390                           ;Config register CONFIG @ 0x2007
   391                           ;	Oscillator Selection bits
   392                           ;	FOSC = XT, XT oscillator
   393                           ;	Watchdog Timer
   394                           ;	WDTE = OFF, WDT disabled
   395                           ;	Power-up Timer Enable bit
   396                           ;	PWRTE = OFF, Power-up Timer is disabled
   397                           ;	Code Protection bit
   398                           ;	CP = OFF, Code protection disabled
   399  2007                     	org	8199
   400  2007  3FF9               	dw	16377

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66      4       5

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myInterruptHnadler in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_setupTimer

Critical Paths under _myInterruptHnadler in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                         _setupTimer
 ---------------------------------------------------------------------------------
 (1) _setupTimer                                           1     1      0       0
                                              3 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _myInterruptHnadler                                   3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setupTimer

 _myInterruptHnadler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42      4       5       3        7.6%
ABS                  0      0       5       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       5       6        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed Dec 23 19:56:51 2020

                         l23 0044                           l24 0044                           l36 003D  
                        l660 003E                          l654 002D                          l662 003F  
                        l656 0034                          l664 0041                          l658 003A  
                        l666 0043                         _T0IF 005A                         i1l33 0026  
                       _TMR0 0001                         u3_20 0014                         u3_21 0013  
                       u4_20 001E                         u4_21 001D                         _main 003E  
                       btemp 004E                         start 000B                        ?_main 000C  
                      i1l670 0014                        i1l672 001E                        i1l674 001F  
                      i1l676 0023                        i1l668 0010                        i1l678 0025  
                      _PORTB 0006                        _TRISB 0086                        pclath 000A  
                      status 0003                        wtemp0 004E              __initialization 000C  
               __end_of_main 0046                       ??_main 0000   __end_of_myInterruptHnadler 002D  
                     saved_w 004E      __end_of__initialization 000E               __pcstackCOMMON 0000  
             _OPTION_REGbits 0081                   __pbssBANK0 0010                   __pmaintext 003E  
                 __pintentry 0004                      __ptext1 002D                      __ptext2 0010  
                    _counter 0010         end_of_initialization 000E                   _setupTimer 002D  
         _myInterruptHnadler 0010          ?_myInterruptHnadler 000C         ??_myInterruptHnadler 000C  
        start_initialization 000C                  ?_setupTimer 000C                    ___latbits 0000  
              __pcstackBANK0 000C            interrupt_function 0004          __size_of_setupTimer 0011  
              __size_of_main 0008                 ??_setupTimer 000F  __size_of_myInterruptHnadler 001D  
                 _INTCONbits 000B                     intlevel1 0000           __end_of_setupTimer 003E  
                 _OPTION_REG 0081  
