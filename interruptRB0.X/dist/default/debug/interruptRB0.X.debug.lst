

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed Dec 23 14:59:02 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F84A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x4E,2
    13  0000                     
    14                           ; Version 2.20
    15                           ; Generated 12/02/2020 GMT
    16                           ; 
    17                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F84A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  0081                     	;# 
    60  0085                     	;# 
    61  0086                     	;# 
    62  0088                     	;# 
    63  0089                     	;# 
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  0086                     	;# 
    78  0088                     	;# 
    79  0089                     	;# 
    80  000B                     _INTCONbits	set	11
    81  0006                     _PORTBbits	set	6
    82  0005                     _PORTA	set	5
    83  0006                     _PORTB	set	6
    84  0059                     _INTF	set	89
    85  0081                     _OPTION_REGbits	set	129
    86  0085                     _TRISA	set	133
    87  0086                     _TRISB	set	134
    88                           
    89                           	psect	cinit
    90  000C                     start_initialization:	
    91                           ; #config settings
    92                           
    93  000C                     __initialization:
    94  000C                     end_of_initialization:	
    95                           ;End of C runtime variable initialization code
    96                           
    97  000C                     __end_of__initialization:
    98  000C  0183               	clrf	3
    99  000D  282D               	ljmp	_main	;jump to C main() function
   100                           
   101                           	psect	cstackCOMMON
   102  0000                     __pcstackCOMMON:
   103  0000                     ??_setupInterrupt:
   104                           
   105                           	psect	cstackBANK0
   106  000C                     __pcstackBANK0:	
   107                           ; 1 bytes @ 0x0
   108                           
   109  000C                     ?_setupInterrupt:
   110  000C                     ?_main:	
   111                           ; 1 bytes @ 0x0
   112                           
   113  000C                     ?_myInterruptHnadler:	
   114                           ; 1 bytes @ 0x0
   115                           
   116  000C                     ??_myInterruptHnadler:	
   117                           ; 1 bytes @ 0x0
   118                           
   119                           
   120                           ; 1 bytes @ 0x0
   121  000C                     	ds	5
   122  0011                     ??_main:
   123                           
   124                           ; 1 bytes @ 0x5
   125  0011                     	ds	3
   126                           
   127                           	psect	maintext
   128  002D                     __pmaintext:	
   129 ;;
   130 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   131 ;;
   132 ;; *************** function _main *****************
   133 ;; Defined at:
   134 ;;		line 69 in file "main.c"
   135 ;; Parameters:    Size  Location     Type
   136 ;;		None
   137 ;; Auto vars:     Size  Location     Type
   138 ;;		None
   139 ;; Return value:  Size  Location     Type
   140 ;;                  1    wreg      void 
   141 ;; Registers used:
   142 ;;		wreg, status,2, status,0, pclath, cstack
   143 ;; Tracked objects:
   144 ;;		On entry : B00/0
   145 ;;		On exit  : 0/0
   146 ;;		Unchanged: 0/0
   147 ;; Data sizes:     COMMON   BANK0
   148 ;;      Params:         0       0
   149 ;;      Locals:         0       0
   150 ;;      Temps:          0       3
   151 ;;      Totals:         0       3
   152 ;;Total ram usage:        3 bytes
   153 ;; Hardware stack levels required when called:    2
   154 ;; This function calls:
   155 ;;		_setupInterrupt
   156 ;; This function is called by:
   157 ;;		Startup code after reset
   158 ;; This function uses a non-reentrant model
   159 ;;
   160                           
   161                           
   162                           ;psect for function _main
   163  002D                     _main:
   164  002D                     l657:	
   165                           ;incstack = 0
   166                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   167                           
   168                           
   169                           ;main.c: 71:     PORTB = 0;
   170  002D  1283               	bcf	3,5	;RP0=0, select bank0
   171  002E  0186               	clrf	6	;volatile
   172                           
   173                           ;main.c: 72:     PORTA = 0;
   174  002F  0185               	clrf	5	;volatile
   175  0030                     l659:
   176                           
   177                           ;main.c: 73:     TRISB = 0x01;
   178  0030  3001               	movlw	1
   179  0031  1683               	bsf	3,5	;RP0=1, select bank1
   180  0032  0086               	movwf	6	;volatile
   181  0033                     l661:
   182                           
   183                           ;main.c: 74:     TRISA = 0x00;
   184  0033  0185               	clrf	5	;volatile
   185  0034                     l663:
   186                           
   187                           ;main.c: 76:     setupInterrupt();
   188  0034  204A               	fcall	_setupInterrupt
   189  0035                     l665:
   190                           
   191                           ;main.c: 78:     PORTBbits.RB1 = 1;
   192  0035  1283               	bcf	3,5	;RP0=0, select bank0
   193  0036  1486               	bsf	6,1	;volatile
   194  0037                     l667:
   195                           
   196                           ;main.c: 81:     {;main.c: 82:         PORTB ^= (0b00000110);
   197  0037  3006               	movlw	6
   198  0038  1283               	bcf	3,5	;RP0=0, select bank0
   199  0039  0091               	movwf	??_main
   200  003A  0811               	movf	??_main,w
   201  003B  0686               	xorwf	6,f	;volatile
   202  003C                     l669:
   203                           
   204                           ;main.c: 83:         _delay((unsigned long)((550)*(4000000/4000.0)));
   205  003C  3003               	movlw	3
   206  003D  0093               	movwf	??_main+2
   207  003E  30CB               	movlw	203
   208  003F  0092               	movwf	??_main+1
   209  0040  3045               	movlw	69
   210  0041  0091               	movwf	??_main
   211  0042                     u37:
   212  0042  0B91               	decfsz	??_main,f
   213  0043  2842               	goto	u37
   214  0044  0B92               	decfsz	??_main+1,f
   215  0045  2842               	goto	u37
   216  0046  0B93               	decfsz	??_main+2,f
   217  0047  2842               	goto	u37
   218  0048  2837               	goto	l667
   219  0049  280B               	ljmp	start
   220  004A                     __end_of_main:
   221                           
   222                           	psect	text1
   223  004A                     __ptext1:	
   224 ;; *************** function _setupInterrupt *****************
   225 ;; Defined at:
   226 ;;		line 105 in file "main.c"
   227 ;; Parameters:    Size  Location     Type
   228 ;;		None
   229 ;; Auto vars:     Size  Location     Type
   230 ;;		None
   231 ;; Return value:  Size  Location     Type
   232 ;;                  1    wreg      void 
   233 ;; Registers used:
   234 ;;		None
   235 ;; Tracked objects:
   236 ;;		On entry : 0/0
   237 ;;		On exit  : 0/0
   238 ;;		Unchanged: 0/0
   239 ;; Data sizes:     COMMON   BANK0
   240 ;;      Params:         0       0
   241 ;;      Locals:         0       0
   242 ;;      Temps:          0       0
   243 ;;      Totals:         0       0
   244 ;;Total ram usage:        0 bytes
   245 ;; Hardware stack levels used:    1
   246 ;; Hardware stack levels required when called:    1
   247 ;; This function calls:
   248 ;;		Nothing
   249 ;; This function is called by:
   250 ;;		_main
   251 ;; This function uses a non-reentrant model
   252 ;;
   253                           
   254                           
   255                           ;psect for function _setupInterrupt
   256  004A                     _setupInterrupt:
   257  004A                     l655:	
   258                           ;incstack = 0
   259                           ; Regs used in _setupInterrupt: []
   260                           
   261                           
   262                           ;main.c: 107:     INTCONbits.RBIF = 0;
   263  004A  100B               	bcf	11,0	;volatile
   264                           
   265                           ;main.c: 108:     OPTION_REGbits.INTEDG = 0;
   266  004B  1683               	bsf	3,5	;RP0=1, select bank1
   267  004C  1301               	bcf	1,6	;volatile
   268                           
   269                           ;main.c: 109:     INTCONbits.GIE = 1;
   270  004D  178B               	bsf	11,7	;volatile
   271                           
   272                           ;main.c: 110:     INTCONbits.INTE = 1;
   273  004E  160B               	bsf	11,4	;volatile
   274  004F                     l37:
   275  004F  0008               	return
   276  0050                     __end_of_setupInterrupt:
   277                           
   278                           	psect	text2
   279  000E                     __ptext2:	
   280 ;; *************** function _myInterruptHnadler *****************
   281 ;; Defined at:
   282 ;;		line 91 in file "main.c"
   283 ;; Parameters:    Size  Location     Type
   284 ;;		None
   285 ;; Auto vars:     Size  Location     Type
   286 ;;		None
   287 ;; Return value:  Size  Location     Type
   288 ;;                  1    wreg      void 
   289 ;; Registers used:
   290 ;;		wreg, status,2, status,0
   291 ;; Tracked objects:
   292 ;;		On entry : 0/0
   293 ;;		On exit  : 0/0
   294 ;;		Unchanged: 0/0
   295 ;; Data sizes:     COMMON   BANK0
   296 ;;      Params:         0       0
   297 ;;      Locals:         0       0
   298 ;;      Temps:          0       5
   299 ;;      Totals:         0       5
   300 ;;Total ram usage:        5 bytes
   301 ;; Hardware stack levels used:    1
   302 ;; This function calls:
   303 ;;		Nothing
   304 ;; This function is called by:
   305 ;;		Interrupt level 1
   306 ;; This function uses a non-reentrant model
   307 ;;
   308                           
   309                           
   310                           ;psect for function _myInterruptHnadler
   311  000E                     _myInterruptHnadler:
   312  000E                     i1l671:
   313                           
   314                           ;main.c: 94:     if (INTCONbits.INTF)
   315  000E  1C8B               	btfss	11,1	;volatile
   316  000F  2811               	goto	u2_21
   317  0010  2812               	goto	u2_20
   318  0011                     u2_21:
   319  0011  2820               	goto	i1l677
   320  0012                     u2_20:
   321  0012                     i1l673:
   322                           
   323                           ;main.c: 95:     {;main.c: 96:         PORTA |= 0x01;
   324  0012  1405               	bsf	5,0	;volatile
   325  0013                     i1l675:
   326                           
   327                           ;main.c: 97:         _delay((unsigned long)((1000)*(4000000/4000.0)));
   328  0013  3006               	movlw	6
   329  0014  008E               	movwf	??_myInterruptHnadler+2
   330  0015  3013               	movlw	19
   331  0016  008D               	movwf	??_myInterruptHnadler+1
   332  0017  30AD               	movlw	173
   333  0018  008C               	movwf	??_myInterruptHnadler
   334  0019                     u4_27:
   335  0019  0B8C               	decfsz	??_myInterruptHnadler,f
   336  001A  2819               	goto	u4_27
   337  001B  0B8D               	decfsz	??_myInterruptHnadler+1,f
   338  001C  2819               	goto	u4_27
   339  001D  0B8E               	decfsz	??_myInterruptHnadler+2,f
   340  001E  2819               	goto	u4_27
   341  001F  2820               	nop2
   342  0020                     i1l677:
   343                           
   344                           ;main.c: 100:     PORTA &= ~(0x01);
   345  0020  30FE               	movlw	254
   346  0021  1283               	bcf	3,5	;RP0=0, select bank0
   347  0022  008C               	movwf	??_myInterruptHnadler
   348  0023  080C               	movf	??_myInterruptHnadler,w
   349  0024  0585               	andwf	5,f	;volatile
   350  0025                     i1l679:
   351                           
   352                           ;main.c: 101:     INTF = 0;
   353  0025  108B               	bcf	11,1	;volatile
   354  0026                     i1l34:
   355  0026  0810               	movf	??_myInterruptHnadler+4,w
   356  0027  008A               	movwf	10
   357  0028  0E0F               	swapf	(??_myInterruptHnadler+3)^0,w
   358  0029  0083               	movwf	3
   359  002A  0ECE               	swapf	btemp,f
   360  002B  0E4E               	swapf	btemp,w
   361  002C  0009               	retfie
   362  002D                     __end_of_myInterruptHnadler:
   363  004E                     btemp	set	78	;btemp
   364  004E                     wtemp0	set	78
   365                           
   366                           	psect	intentry
   367  0004                     __pintentry:	
   368                           ;incstack = 0
   369                           ; Regs used in _myInterruptHnadler: [wreg+status,2+status,0]
   370                           
   371  0004                     interrupt_function:
   372  004E                     saved_w	set	btemp
   373  0004  00CE               	movwf	btemp
   374  0005  0E03               	swapf	3,w
   375  0006  1283               	bcf	3,5	;RP0=0, select bank0
   376  0007  008F               	movwf	??_myInterruptHnadler+3
   377  0008  080A               	movf	10,w
   378  0009  0090               	movwf	??_myInterruptHnadler+4
   379  000A  280E               	ljmp	_myInterruptHnadler
   380                           
   381                           	psect	config
   382                           
   383                           ;Config register CONFIG @ 0x2007
   384                           ;	Oscillator Selection bits
   385                           ;	FOSC = XT, XT oscillator
   386                           ;	Watchdog Timer
   387                           ;	WDTE = OFF, WDT disabled
   388                           ;	Power-up Timer Enable bit
   389                           ;	PWRTE = OFF, Power-up Timer is disabled
   390                           ;	Code Protection bit
   391                           ;	CP = OFF, Code protection disabled
   392  2007                     	org	8199
   393  2007  3FF9               	dw	16377

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66      8       8

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myInterruptHnadler in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myInterruptHnadler in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              5 BANK0      3     3      0
                     _setupInterrupt
 ---------------------------------------------------------------------------------
 (1) _setupInterrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _myInterruptHnadler                                   5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setupInterrupt

 _myInterruptHnadler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42      8       8       3       12.1%
ABS                  0      0       0       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed Dec 23 14:59:02 2020

                         l37 004F                           u37 0042                          l661 0033  
                        l655 004A                          l663 0034                          l665 0035  
                        l657 002D                          l667 0037                          l659 0030  
                        l669 003C                         _INTF 0059                         i1l34 0026  
                       u2_20 0012                         u2_21 0011                         u4_27 0019  
                       _main 002D                         btemp 004E                         start 000B  
                      ?_main 000C                        i1l671 000E                        i1l673 0012  
                      i1l675 0013                        i1l677 0020                        i1l679 0025  
                      _PORTA 0005                        _PORTB 0006                        _TRISA 0085  
                      _TRISB 0086                        pclath 000A                        status 0003  
                      wtemp0 004E              __initialization 000C                 __end_of_main 004A  
                     ??_main 0011             ??_setupInterrupt 0000   __end_of_myInterruptHnadler 002D  
                     saved_w 004E      __end_of__initialization 000C               __pcstackCOMMON 0000  
             _OPTION_REGbits 0081                   __pmaintext 002D                   __pintentry 0004  
                    __ptext1 004A                      __ptext2 000E         end_of_initialization 000C  
                  _PORTBbits 0006           _myInterruptHnadler 000E          ?_myInterruptHnadler 000C  
       ??_myInterruptHnadler 000C          start_initialization 000C      __size_of_setupInterrupt 0006  
                  ___latbits 0000                __pcstackBANK0 000C            interrupt_function 0004  
             _setupInterrupt 004A       __end_of_setupInterrupt 0050                __size_of_main 001D  
__size_of_myInterruptHnadler 001F                   _INTCONbits 000B              ?_setupInterrupt 000C  
                   intlevel1 0000  
